plotPCA(rld, intgroup = c("gene_symbol", "timings"))
res = results(dds)
head(dds)
res = results(dds)
head(res)
res = results(dds)
head(res)
summary(res)
res = results(dds, lfcThreshold = 0.01)
DESeq2::plotMA(res, ylim = c(-5, 5))
library(dyplr)
library(dplyr)
resl = as.data.frame(res)
View(resl)
library(dplyr)
res1 = as.data.frame(res)
res1 = mutate(res1, sig = ifelse(res1$padj<0.1, "FDR < 0.1", "Not Sig"))
View(res1)
library(dplyr)
res1 = as.data.frame(res)
res1 = mutate(res1, sig = ifelse(res1$padj<0.1, "FDR < 0.1", "Not Sig"))
res1[which(abs(res1$log2FoldChange) < 0.1), "sig"] = "Not Sig"
View(res1)
library(ggplot2)
ggplot(res1, aes(log2FoldChange, -log10(padj))) + geom_point(aes(col = sig)) + scale_color_manual(values = c("red", "black"))
res = res[order(abs(res$log2FoldChange), decreasing = TRUE)]
res = res[order(abs(res$log2FoldChange), decreasing = TRUE), ]
View(as.data.frame(res))
res = res[order(abs(res$log2FoldChange), decreasing = TRUE), ]
top_gene = rownames(res)[1]
print(top_gene)
res = res[order(abs(res$log2FoldChange), decreasing = TRUE), ]
top_gene = rownames(res)[1]
plotCounts(dds, gene = top_gene, intgroup = c("gene_symbol", "timings"))
# importing libraries
library(DESeq2)
library(dplyr)
#importing data
countData = read.csv("./data/data_soybean.csv")
# importing libraries
library(DESeq2)
library(dplyr)
#importing data
countData = read.csv("./data/data_soybean.csv")
View(countData)
#removes first col
rownames(countData) = countData$gene
countData = countData[, -1] #--- uncomment when re-running entire script
par(mar = c(8, 4, 4, 3) + 0.1)
barplot(colSums(countData), las = 3)
#removes first col
rownames(countData) = countData$gene
#countData = countData[, -1] #--- uncomment when re-running entire script
par(mar = c(8, 4, 4, 7) + 0.1)
barplot(colSums(countData), las = 3)
#removes first col
rownames(countData) = countData$gene
#countData = countData[, -1] #--- uncomment when re-running entire script
par(mar = c(8, 4, 4, 23) + 0.1)
barplot(colSums(countData), las = 3)
#removes first col
rownames(countData) = countData$gene
#countData = countData[, -1] #--- uncomment when re-running entire script
par(mar = c(8, 4, 55, 1) + 0.1)
barplot(colSums(countData), las = 3)
#removes first col
rownames(countData) = countData$gene
#countData = countData[, -1] #--- uncomment when re-running entire script
par(mar = c(8, 4, 23, 1) + 0.1)
barplot(colSums(countData), las = 3)
#removes first col
rownames(countData) = countData$gene
#countData = countData[, -1] #--- uncomment when re-running entire script
par(mar = c(8, 4, 4, 1) + 0.1)
barplot(colSums(countData), las = 3)
#removes first col
rownames(countData) = countData$gene
#countData = countData[, -1] #--- uncomment when re-running entire script
par(mar = c(8, 4, 5, 1) + 0.1)
barplot(colSums(countData), las = 3)
#removes first col
rownames(countData) = countData$gene
#countData = countData[, -1] #--- uncomment when re-running entire script
par(mar = c(8, 4, 6, 1) + 0.1)
barplot(colSums(countData), las = 3)
#removes first col
rownames(countData) = countData$gene
#countData = countData[, -1] #--- uncomment when re-running entire script
par(mar = c(8, 4, 9, 1) + 0.1)
barplot(colSums(countData), las = 3)
#removes first col
rownames(countData) = countData$gene
#countData = countData[, -1] #--- uncomment when re-running entire script
par(mar = c(10, 4, 4, 1) + 0.1)
barplot(colSums(countData), las = 3)
#removes first col
rownames(countData) = countData$gene
#countData = countData[, -1] #--- uncomment when re-running entire script
par(mar = c(17, 4, 4, 1) + 0.1)
barplot(colSums(countData), las = 3)
#removes first col
rownames(countData) = countData$gene
#countData = countData[, -1] #--- uncomment when re-running entire script
par(mar = c(8, 9, 4, 1) + 0.1)
barplot(colSums(countData), las = 3)
#removes first col
rownames(countData) = countData$gene
#countData = countData[, -1] #--- uncomment when re-running entire script
par(mar = c(8, 4, 4, 1) + 0.1)
barplot(colSums(countData), las = 3)
#removes first col
rownames(countData) = countData$gene
#countData = countData[, -1] #--- uncomment when re-running entire script
par(mar = c(8, 4, 3, 1) + 0.1)
barplot(colSums(countData), las = 3)
#removes first col
rownames(countData) = countData$gene
#countData = countData[, -1] #--- uncomment when re-running entire script
par(mar = c(8, 2, 4, 1) + 0.1)
barplot(colSums(countData), las = 3)
#removes first col
rownames(countData) = countData$gene
#countData = countData[, -1] #--- uncomment when re-running entire script
par(mar = c(5, 4, 4, 1) + 0.1)
barplot(colSums(countData), las = 3)
#removes first col
rownames(countData) = countData$gene
#countData = countData[, -1] #--- uncomment when re-running entire script
par(mar = c(5, 14, 4, 1) + 0.1)
barplot(colSums(countData), las = 3)
#removes first col
rownames(countData) = countData$gene
#countData = countData[, -1] #--- uncomment when re-running entire script
par(mar = c(8, 4, 4, 1) + 0.1)
barplot(colSums(countData), las = 3)
#removes first col
rownames(countData) = countData$gene
#countData = countData[, -1] #--- uncomment when re-running entire script
par(mar = c(5, 4, 4, 1) + 0.1)
barplot(colSums(countData), las = 3)
#removes first col
rownames(countData) = countData$gene
#countData = countData[, -1] #--- uncomment when re-running entire script
par(mar = c(5, 4, 4, 1))
barplot(colSums(countData), las = 3)
#removes first col
rownames(countData) = countData$gene
#countData = countData[, -1] #--- uncomment when re-running entire script
par(mar = c(5, 4, 4, 1) + 0.6)
barplot(colSums(countData), las = 3)
#removes first col
rownames(countData) = countData$gene
#countData = countData[, -1] #--- uncomment when re-running entire script
par(mar = c(5, 4, 4, 1) + 5)
barplot(colSums(countData), las = 3)
#removes first col
rownames(countData) = countData$gene
#countData = countData[, -1] #--- uncomment when re-running entire script
par(mar = c(5, 4, 4, 1) + 0.1)
barplot(colSums(countData), las = 3)
#removes first col
rownames(countData) = countData$gene
#countData = countData[, -1] #--- uncomment when re-running entire script
par(mar = c(5, 4, 4, 3) + 0.1)
barplot(colSums(countData), las = 3)
# importing libraries
library(DESeq2)
library(dplyr)
#importing data
countData = read.csv("./data/data_organization/DESEQ_files/WT_WR1.csv")
View(countData)
#removes first col
rownames(countData) = countData$gene
#countData = countData[, -1] #--- uncomment when re-running entire script
par(mar = c(5, 4, 4, 3) + 0.1)
barplot(colSums(countData), las = 3)
#removes first col
rownames(countData) = countData$gene
countData = countData[, -1] #--- uncomment when re-running entire script
par(mar = c(5, 4, 4, 3) + 0.1)
barplot(colSums(countData), las = 3)
logOfData = log2(1 + countData)
View(logOfData)
plot(logOfData[, 1], logOfData[, 4])
gene_symbol = c("wild_type", "wild_type", "wild_type", "wrinkle", "wrinkle", "wrinkle", "wild_type", "wild_type", "wild_type", "wrinkle", "wrinkle", "wrinkle", "wild_type", "wild_type", "wild_type", "wrinkle", "wrinkle", "wrinkle", "wild_type", "wild_type", "wild_type", "wrinkle", "wrinkle", "wrinkle")
#treatment = c("control", "control", "control", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "control", "control", "control", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "control", "control", "control", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration")
#timings = c("R5", "R5", "R5", "R5", "R5", "R5", "R5", "R5", "R5", "R5", "R5", "R5", "R5/6", "R5/6", "R5/6", "R5/6", "R5/6", "R5/6", "R5/6", "R5/6", "R5/6", "R5/6", "R5/6", "R5/6", "R6", "R6", "R6", "R6", "R6", "R6", "R6", "R6", "R6", "R6", "R6", "R6")
#colData = as.data.frame(cbind(colnames(countData), gene_symbol, timings))
print(length(gene_symbol))
genotype = c("wild_type", "wild_type", "wild_type", "wrinkle", "wrinkle", "wrinkle", "wild_type", "wild_type", "wild_type", "wrinkle", "wrinkle", "wrinkle", "wild_type", "wild_type", "wild_type", "wrinkle", "wrinkle", "wrinkle")
#treatment = c("control", "control", "control", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "control", "control", "control", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "control", "control", "control", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration")
time = c("R5", "R5", "R5", "R5", "R5", "R5", "R5/6", "R5/6", "R5/6", "R5/6", "R5/6", "R5/6", "R6", "R6", "R6", "R6", "R6", "R6")
#colData = as.data.frame(cbind(colnames(countData), gene_symbol, timings))
print(length(time))
genotype = c("wild_type", "wild_type", "wild_type", "wrinkle", "wrinkle", "wrinkle", "wild_type", "wild_type", "wild_type", "wrinkle", "wrinkle", "wrinkle", "wild_type", "wild_type", "wild_type", "wrinkle", "wrinkle", "wrinkle")
#treatment = c("control", "control", "control", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "control", "control", "control", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "control", "control", "control", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration", "gene_alteration")
time = c("R5", "R5", "R5", "R5", "R5", "R5", "R5/6", "R5/6", "R5/6", "R5/6", "R5/6", "R5/6", "R6", "R6", "R6", "R6", "R6", "R6")
#colData = as.data.frame(cbind(colnames(countData), gene_symbol, timings))
print(length(genotype))
genotype = c("wild_type", "wild_type", "wild_type", "wrinkle", "wrinkle", "wrinkle", "wild_type", "wild_type", "wild_type", "wrinkle", "wrinkle", "wrinkle", "wild_type", "wild_type", "wild_type", "wrinkle", "wrinkle", "wrinkle")
time = c("R5", "R5", "R5", "R5", "R5", "R5", "R5/6", "R5/6", "R5/6", "R5/6", "R5/6", "R5/6", "R6", "R6", "R6", "R6", "R6", "R6")
colData = as.data.frame(cbind(colnames(countData), genotype, time))
print(colData)
vignette("DESeq2")
?results
results
dds = DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~genotype + time + genotype:time)
dds = DESeq(dds)
nrow(dds)
sizeFactors(dds)
library(ggplot2)
rld = rlog(dds)
plotPCA(rld, intgroup = c("genotype", "time"))
res = results(dds)
head(res)
summary(res)
DESeq2::plotMA(res, ylim = c(-5, 5))
library(dplyr)
res1 = as.data.frame(res)
res1 = mutate(res1, sig = ifelse(res1$padj<0.1, "FDR < 0.1", "Not Sig"))
res1[which(abs(res1$log2FoldChange) < 0.1), "sig"] = "Not Sig"
library(ggplot2)
ggplot(res1, aes(log2FoldChange, -log10(padj))) + geom_point(aes(col = sig)) + scale_color_manual(values = c("red", "black"))
res = res[order(abs(res$log2FoldChange), decreasing = TRUE), ]
top_gene = rownames(res)[1]
plotCounts(dds, gene = top_gene, intgroup = c("gene_symbol", "timings"))
res = res[order(abs(res$log2FoldChange), decreasing = TRUE), ]
top_gene = rownames(res)[1]
plotCounts(dds, gene = top_gene, intgroup = c("genotypee", "time"))
res = res[order(abs(res$log2FoldChange), decreasing = TRUE), ]
top_gene = rownames(res)[1]
plotCounts(dds, gene = top_gene, intgroup = c("genotype", "time"))
# importing libraries
library(DESeq2)
library(dplyr)
#importing data
countData = read.csv("./data/data_soybean.csv")
#removes first col
rownames(countData) = countData$gene
countData = countData[, -1] #--- uncomment when re-running entire script
par(mar = c(5, 4, 4, 3) + 0.1)
barplot(colSums(countData), las = 3)
logOfData = log2(1 + countData)
plot(logOfData[, 1], logOfData[, 4])
# importing libraries
library(DESeq2)
library(dplyr)
#importing data
countData = read.csv("./data/data_soybean.csv", header = TRUE, row.names = 1)
#plot col_counts
par(mar = c(5, 4, 4, 3) + 0.1)
barplot(colSums(countData), las = 3)
logOfData = log2(1 + countData)
plot(logOfData[, 1], logOfData[, 4])
View(logOfData)
plot(logOfData[, 1], logOfData[, 3])
colData = read.csv("./data/sample_info.csv", header = TRUE)
View(colData)
# importing libraries
library(DESeq2)
library(dplyr)
#importing data
countData = read.csv("./data/data_organization/DESEQ_files/WT_WR1.csv", header = TRUE, row.names = 1)
#plot col_counts
par(mar = c(5, 4, 4, 3) + 0.1)
barplot(colSums(countData), las = 3)
dds = DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~genotype)
dds = DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~genotype + time)
dds = DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~genotype + time + genotype:time)
genotype = c("wild_type", "wild_type", "wild_type", "wrinkle", "wrinkle", "wrinkle", "wild_type", "wild_type", "wild_type", "wrinkle", "wrinkle", "wrinkle", "wild_type", "wild_type", "wild_type", "wrinkle", "wrinkle", "wrinkle")
time = c("R5", "R5", "R5", "R5", "R5", "R5", "R5/6", "R5/6", "R5/6", "R5/6", "R5/6", "R5/6", "R6", "R6", "R6", "R6", "R6", "R6")
colData = as.data.frame(cbind(colnames(countData), genotype, time))
print(colData)
dds = DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~genotype)
dds = DESeq(dds)
nrow(dds)
res = results(dds)
head(res)
summary(res)
library(ggplot2)
rld = rlog(dds)
plotPCA(rld, intgroup = c("genotype", "time"))
library(ggplot2)
rld = rlog(dds)
plotPCA(rld, intgroup = c("genotype"))
res = results(dds)
head(res)
summary(res)
res = results(dds, lfcThreshold = 0.01)
DESeq2::plotMA(res, ylim = c(-5, 5))
library(dplyr)
res1 = as.data.frame(res)
res1 = mutate(res1, sig = ifelse(res1$padj<0.1, "FDR < 0.1", "Not Sig"))
res1[which(abs(res1$log2FoldChange) < 0.1), "sig"] = "Not Sig"
library(ggplot2)
ggplot(res1, aes(log2FoldChange, -log10(padj))) + geom_point(aes(col = sig)) + scale_color_manual(values = c("red", "black"))
res = res[order(abs(res$log2FoldChange), decreasing = TRUE), ]
top_gene = rownames(res)[1]
plotCounts(dds, gene = top_gene, intgroup = c("genotype"))
View(res1)
library(ggplot2)
ggplot(res1, aes(log2FoldChange, -log10(padj))) + geom_point(aes(col = sig)) + scale_color_manual(values = c("blue", "black"))
View(res)
res = res[order(abs(res$log2FoldChange), decreasing = TRUE), ]
top_gene = rownames(res)[1]
plotCounts(dds, gene = top_gene, intgroup = c("genotype"))
View(as.data.frame(res))
print(top_gene)
library(org.MM.eg.db)
BiocManager::install("org.Mm.eg.db")
library(AnnotationDbi)
library(org.MM.eg.db)
library(org.MM.eg.db)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Mm.eg.db")
library(org.MM.eg.db)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Mm.eg.db")
BiocManager::install("org.Mm.eg.db")
force = TRUE
BiocManager::install("org.Mm.eg.db")
library(AnnotationDbi)
res$refseq = row.names(res)
View(as.data.frame(res))
BiocManager::install("org.Mm.eg.db")::force = TRUE
force = TRUE
BiocManager::install("org.Mm.eg.db")
write.csv(".data/wt_wr1_results.csv", header = TRUE)
write.csv(".data/wt_wr1_results.csv")
write.csv(".data/wt_wr1_results.csv", as.data.frame(res), header = TRUE)
write.csv(".data/wt_wr1_results.csv", as.data.frame(res))
write.csv("wt_wr1_results.csv", as.data.frame(res))
write.csv(as.data.frame(res), file = "wt_wr1_results.csv", )
setwd("/Users/pranavpalli/Desktop/summer_21")
set.seed(133)
library("DESeq2")
table_count <- read.table(file = "./data/all_raw_table_WRI1_06292020.txt", header = TRUE, row.names=1)
table_cond <- read.csv(file = "./data/sample_info.csv", header = TRUE, row.names=1)
table_cond$time <- factor(table_cond$time)
table_cond$wr1 <- factor(table_cond$wr1)
table_cond$dgat <- factor(table_cond$dgat)
table_cond$kas <- factor(table_cond$kas)
countdata1 <- table_count[ ,rownames(table_cond)]
rn_f <- rownames(countdata1)
table_count <- read.table(file = "/Users/pranavpalli/Desktop/summer_21/data/all_raw_table_WRI1_062920202.txt", header = TRUE, row.names=1)
setwd("/Users/pranavpalli/Desktop/summer_21")
set.seed(133)
library("DESeq2")
table_count <- read.table(file = "/Users/pranavpalli/Desktop/summer_21/data/all_raw_table_WRI1_062920202.txt", header = TRUE, row.names=1)
table_cond <- read.csv(file = "./data/sample_info.csv", header = TRUE, row.names=1)
table_cond$time <- factor(table_cond$time)
table_cond$wr1 <- factor(table_cond$wr1)
table_cond$dgat <- factor(table_cond$dgat)
table_cond$kas <- factor(table_cond$kas)
countdata1 <- table_count[ , rownames(table_cond)]
rn_f <- rownames(countdata1)
#highlight Wr1's impact to the system
###############################
ddsLRT <- DESeq(dds, fitType='local', test="LRT", reduced= ~ time+dgat+kas+dgat:time+kas:time)
resLRT <- results(ddsLRT)
resLRT <- resLRT[order(resLRT$padj),]
write.csv(as.data.frame(resLRT), file = "WR1_sig.csv")
setwd("/Users/pranavpalli/Desktop/summer_21")
set.seed(133)
library("DESeq2")
table_count <- read.table(file = "./data/all_raw_table_WRI1_062920202.txt", header = TRUE, row.names=1)
table_cond <- read.csv(file = "./data/sample_info.csv", header = TRUE, row.names=1)
table_cond$time <- factor(table_cond$time)
table_cond$wr1 <- factor(table_cond$wr1)
table_cond$dgat <- factor(table_cond$dgat)
table_cond$kas <- factor(table_cond$kas)
countdata1 <- table_count[ , rownames(table_cond)]
rn_f <- rownames(countdata1)
dds <- DESeqDataSetFromMatrix(countData = countdata1, colData = table_cond,
design = ~ wr1+time+dgat+kas+wr1:time+dgat:time+kas:time)
ddsTC <- DESeq(dds, fitType='local')
resTC <- results(ddsTC)
resTC <- resTC[order(resTC$padj),]
write.csv(as.data.frame(resTC), file = "full_model_result.csv")
#highlight Wr1's impact to the system
###############################
ddsLRT <- DESeq(dds, fitType='local', test="LRT", reduced= ~ time+dgat+kas+dgat:time+kas:time)
resLRT <- results(ddsLRT)
resLRT <- resLRT[order(resLRT$padj),]
write.csv(as.data.frame(resLRT), file = "WR1_sig.csv")
#highlight Dgat's impact to the system
###############################
ddsLRT <- DESeq(dds, fitType='local', test="LRT", reduced= ~ time+wr1+kas+wr1:time+kas:time)
resLRT <- results(ddsLRT)
resLRT <- resLRT[order(resLRT$padj),]
write.csv(as.data.frame(resLRT), file = "Dgat_sig.csv")
#highlight Kas's impact to the system
###############################
ddsLRT <- DESeq(dds, fitType='local', test="LRT", reduced= ~ time+wr1+dgat+wr1:time+dgat:time)
resLRT <- results(ddsLRT)
resLRT <- resLRT[order(resLRT$padj),]
write.csv(as.data.frame(resLRT), file = "Kas_sig.csv")
source('~/Desktop/summer_21/soybean_deseq2_contrast.R')
BiocManager::install("org.Mm.eg.db")
BiocManager::install("org.Mm.eg.db")
library("org.Mm.eg.db")
library("org.Mm.eg.db")
citation("DESeq2")
citation(dplyr)
citation("dplyr")
source('~/Desktop/summer_21/scripts/diff_gene_expression.R')
source('~/Desktop/summer_21/scripts/diff_gene_expression.R')
knitr::opts_chunk$set(echo = F)
true = TRUE
false = FALSE
# importing libraries
library(DESeq2)
library(dplyr)
#importing data
countData = read.csv("/Users/pranavpalli/Desktop/summer_21/data/raw_counts/data_soybean.csv", header = TRUE, row.names = 1)
#plot col_counts
par(mar = c(5, 4, 4, 3) + 0.1)
barplot(colSums(countData), las = 3)
logOfData = log2(1 + countData)
plot(logOfData[, 1], logOfData[, 3])
#countData = read.csv("./data/raw_counts/data_soybean.csv", header = TRUE, row.names = 1)
#logOfData = log2(1 + countData)
plot(logOfData[, 1], logOfData[, 23])
countData = read.csv("./data/raw_counts/data_soybean.csv", header = TRUE, row.names = 1)
#countData = read.csv("./data/raw_counts/data_soybean.csv", header = TRUE, row.names = 1)
#logOfData = log2(1 + countData)
plot(logOfData[, 1], logOfData[, 23], xlab = "Log10 of A1_1", ylab = "Log10 of B4_2")
#countData = read.csv("./data/raw_counts/data_soybean.csv", header = TRUE, row.names = 1)
#logOfData = log2(1 + countData)
plot(logOfData[, 1], logOfData[, 23], main = "Log10 of samples", xlab = "A1_1", ylab = "B4_2")
#countData = read.csv("./data/raw_counts/data_soybean.csv", header = TRUE, row.names = 1)
#logOfData = log2(1 + countData)
plot(logOfData[, 1], logOfData[, 23], main = "log10 of samples", xlab = "A1_1", ylab = "B4_2")
#countData = read.csv("./data/raw_counts/data_soybean.csv", header = TRUE, row.names = 1)
#logOfData = log2(1 + countData)
plot(logOfData[, 1], logOfData[, 3], main = "log10 of samples", xlab = "A1_1", ylab = "A1_3")
#countData = read.csv("./data/raw_counts/data_soybean.csv", header = TRUE, row.names = 1)
#logOfData = log2(1 + countData)
par(mar = c(5, 4, 4, 3) + 0.1)
plot(logOfData[, 1], logOfData[, 3], main = "log10 of samples", xlab = "A1_1", ylab = "A1_3")
#countData = read.csv("./data/raw_counts/data_soybean.csv", header = TRUE, row.names = 1)
#logOfData = log2(1 + countData)
par(mar = c(2, 4, 4, 3) + 0.1)
plot(logOfData[, 1], logOfData[, 3], main = "log10 of samples", xlab = "A1_1", ylab = "A1_3")
#countData = read.csv("./data/raw_counts/data_soybean.csv", header = TRUE, row.names = 1)
#logOfData = log2(1 + countData)
par(mar = c(4, 4, 4, 3) + 0.1)
plot(logOfData[, 1], logOfData[, 3], main = "log10 of samples", xlab = "A1_1", ylab = "A1_3")
#countData = read.csv("./data/raw_counts/data_soybean.csv", header = TRUE, row.names = 1)
#logOfData = log2(1 + countData)
par(mar = c(4, 4, 4, 0) + 0.1)
plot(logOfData[, 1], logOfData[, 3], main = "log10 of samples", xlab = "A1_1", ylab = "A1_3")
#countData = read.csv("./data/raw_counts/data_soybean.csv", header = TRUE, row.names = 1)
#logOfData = log2(1 + countData)
par(mar = c(4, 4, 4, 0) + 0.1)
plot(logOfData[, 1], logOfData[, 23], main = "log10 of samples", xlab = "A1_1", ylab = "B4_2")
#countData = read.csv("./data/raw_counts/data_soybean.csv", header = TRUE, row.names = 1)
#logOfData = log2(1 + countData)
par(mar = c(4, 4, 4, 0) + 0.1)
plot(logOfData[, 1], logOfData[, 23], main = "log of samples", xlab = "A1_1", ylab = "B4_2")
#countData = read.csv("./data/raw_counts/data_soybean.csv", header = TRUE, row.names = 1)
#logOfData = log2(1 + countData)
par(mar = c(4, 4, 4, 0) + 0.1)
plot(logOfData[, 1], logOfData[, 3], main = "log of samples", xlab = "A1_1", ylab = "A1_3")
#countData = read.csv("./data/raw_counts/data_soybean.csv", header = TRUE, row.names = 1)
#logOfData = log2(1 + countData)
par(mar = c(4, 4, 4, 0) + 0.1)
plot(logOfData[, 1], logOfData[, 3], main = "log of samples", xlab = "A1_1", ylab = "A1_3", col = "red")
#countData = read.csv("./data/raw_counts/data_soybean.csv", header = TRUE, row.names = 1)
#logOfData = log2(1 + countData)
par(mar = c(4, 4, 4, 0) + 0.1)
plot(logOfData[, 1], logOfData[, 23], main = "log of samples", xlab = "A1_1", ylab = "B4_2", col = "red")
#countData = read.csv("./data/raw_counts/data_soybean.csv", header = TRUE, row.names = 1)
#logOfData = log2(1 + countData)
par(mar = c(4, 4, 4, 0) + 0.1)
par(bg = "blue")
plot(logOfData[, 1], logOfData[, 23], main = "log of samples", xlab = "A1_1", ylab = "B4_2", col = "red")
#countData = read.csv("./data/raw_counts/data_soybean.csv", header = TRUE, row.names = 1)
#logOfData = log2(1 + countData)
par(mar = c(4, 4, 4, 0) + 0.1)
par(bg = "gray")
plot(logOfData[, 1], logOfData[, 23], main = "log of samples", xlab = "A1_1", ylab = "B4_2", col = "red")
#countData = read.csv("./data/raw_counts/data_soybean.csv", header = TRUE, row.names = 1)
#logOfData = log2(1 + countData)
par(mar = c(4, 4, 4, 0) + 0.1)
par(bg = "gray")
plot(logOfData[, 1], logOfData[, 3], main = "log of samples", xlab = "A1_1", ylab = "B4_2", col = "red")
#countData = read.csv("./data/raw_counts/data_soybean.csv", header = TRUE, row.names = 1)
#logOfData = log2(1 + countData)
par(mar = c(4, 4, 4, 0) + 0.1)
par(bg = "gray")
plot(logOfData[, 1], logOfData[, 3], main = "log of samples", xlab = "A1_1", ylab = "A1_3", col = "red")
source('~/Desktop/summer_21/scripts/time_expression.R')
source('~/Desktop/summer_21/scripts/time_expression.R')
countData = read.csv(file, header = TRUE)
source('~/Desktop/summer_21/scripts/time_expression.R')
View(countData)
head(countData['X'])
